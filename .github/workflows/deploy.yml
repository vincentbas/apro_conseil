name: Distribute static files on CloudFront

author: Vincent Bas <vincentbas92@gmail.com>
description: |
  Distribute static files by uploading them on S3
  Then if a CloudFront distribution is provided, create an invalidation

on:
  push:
    branches:
      - main  # Adjust based on your branch

jobs:
  distribute-files:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

# inputs:
#   path:
#     description: Path of files to be uploaded to S3
#     required: true
#   artifact-name:
#     description: Artifact containing resources to upload on the bucket
#     required: false
#     default: ''
#   aws-region:
#     description: AWS region on which to "login" (should be the one where bucket is located)
#     required: false
#     default: eu-west-1
#   aws-assume-role:
#     description: AWS role on which to "login"
#     required: false
#     default: arn:aws:iam::781872699919:role/GithubActionsDeployStatics
#   s3-path:
#     description: S3 Bucket on which to distribute files
#     required: true
#   s3-sync-options:
#     description: Additional options to be passed to sync command (e.g --delete)
#     required: false
#     default: ''
#   content-type:
#     description: Content Type option to be attached to uploaded resource on S3
#     required: false
#     default: ''
#   distribution-id:
#     description: |
#       CloudFront distribution to invalidate.
#       If you need to invalidate several distributions, provide JSON encoded values in `distribution-ids` instead
#     required: false
#     default: ''
#   distribution-ids:
#     description: |
#       CloudFront distributions on which to create invalidation, provided as JSON array, for example:
#       with:
#         distribution-ids: '["DISTRIB1", "DISTRIB2"]'
#     required: false
#     default: ''
#   distribution-path:
#     description: Specify path on which invalidation must be created
#     required: false
#     default: '/*'

# runs:
#   using: composite
#   steps:
#     - name: Check if aws is installed
#       id: check-aws
#       shell: bash
#       run: |
#         if type -f aws > /dev/null ; then
#           echo "aws=present" >> $GITHUB_OUTPUT
#         else
#           echo "aws=absent" >> $GITHUB_OUTPUT
#         fi
#     - name: Install python for aswcli
#       if: ${{steps.check-aws.outputs.aws == 'absent'}}
#       uses: actions/setup-python@v5
#       with:
#         python-version: "3.12"
#     - name: Install aws cli
#       if: ${{steps.check-aws.outputs.aws == 'absent'}}
#       shell: bash
#       run: |
#         pip install awscli
#     - name: Download files from artifact
#       if: ${{ inputs.artifact-name != '' }}
#       uses: actions/download-artifact@v4
#       with:
#         name: ${{ inputs.artifact-name }}
#         path: ${{ inputs.path }}
#     - name: Setup AWS credentials
#       uses: aws-actions/configure-aws-credentials@v4.0.2
#       with:
#         role-to-assume: ${{ inputs.aws-assume-role }}
#         role-duration-seconds: 900
#         aws-region: ${{ inputs.aws-region }}
#     - name: Deploy files to S3
#       if: ${{ inputs.content-type == '' }}
#       shell: bash
#       run: |
#         aws s3 sync ${{inputs.s3-sync-options}} ${{inputs.path}} ${{inputs.s3-path}}
#     - name: Deploy files to S3 with content type
#       if: ${{ inputs.content-type != '' }}
#       shell: bash
#       run: |
#         aws s3 sync ${{inputs.s3-sync-options}} ${{inputs.path}} ${{inputs.s3-path}} --content-type ${{ inputs.content-type }}
#     - name: Create CloudFront invalidation
#       if: ${{ inputs.distribution-id != '' }}
#       shell: bash
#       run: |
#         aws cloudfront create-invalidation --distribution-id ${{ inputs.distribution-id }} --paths '${{ inputs.distribution-path}}'
#     - name: Create CloudFront invalidation
#       if: ${{ inputs.distribution-ids != '' }}
#       shell: bash
#       run: |
#         echo '${{inputs.distribution-ids}}' | jq -c '.[]' | sed 's:"::g'| while read distribution; do
#           aws cloudfront create-invalidation --distribution-id $distribution --paths '${{ inputs.distribution-path }}'
#         done